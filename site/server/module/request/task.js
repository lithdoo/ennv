import Router from 'koa-router';
export const task = new Router();
task.get('/prepare/:taskKey', async (ctx, next) => {
    const path = ctx.query.path || '';
    const key = ctx.params.taskKey;
    await taskManager.prepare(key, { path, ctx });
    await next();
});
task.post('/start/:taskKey', async (ctx, next) => {
    const path = ctx.query.path || '';
    const taskId = ctx.query.id || '';
    const key = ctx.params.taskKey;
    await taskManager.start(key, { path, taskId, ctx });
    await next();
});
export const taskManager = new class EnTaskManager {
    all = new Map();
    regist(handle) {
        if (!handle.key)
            return;
        if (this.all.has(handle.key))
            throw new Error('handle has been regist or task-key has been used.');
        this.all.set(handle.key, handle);
        if (handle.router) {
            task.use(`/deal/${encodeURIComponent(handle.key)}/`, handle.router.routes());
        }
    }
    async prepare(key, { path, ctx }) {
        const handle = this.all.get(key);
        if (!handle)
            throw new Error(`handle named "${key}" is not found.`);
        const taskId = Math.random().toString().replace('.', '');
        await handle.onPerpare({ taskId, path }, ctx);
        ctx.set('ennv-task-id', taskId);
    }
    async start(key, { path, taskId, ctx }) {
        const handle = this.all.get(key);
        if (!handle)
            throw new Error(`handle named "${key}" is not found.`);
        await handle.onStart({ taskId, path }, ctx);
    }
};
taskManager.regist({
    key: 'hello',
    onPerpare(_, ctx) {
        ctx.body = {
            html: '<h1>hello world!</h1>'
        };
    },
    onStart(_, ctx) { ctx.body = 'test'; },
    router: (() => {
        const router = new Router();
        router.post('/complete/:tid', () => { });
        router.post('/error/:tid', () => { });
        return router;
    })()
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFzay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXF1ZXN0L3Rhc2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxNQUFNLE1BQU0sWUFBWSxDQUFBO0FBRy9CLE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFBO0FBR2hDLElBQUksQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRTtJQUM5QyxNQUFNLElBQUksR0FBVyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQWMsSUFBSSxFQUFFLENBQUE7SUFDbkQsTUFBTSxHQUFHLEdBQVcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUE7SUFDdEMsTUFBTSxXQUFXLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFBO0lBQzdDLE1BQU0sSUFBSSxFQUFFLENBQUE7QUFDaEIsQ0FBQyxDQUFDLENBQUE7QUFFRixJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUU7SUFDN0MsTUFBTSxJQUFJLEdBQVcsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFjLElBQUksRUFBRSxDQUFBO0lBQ25ELE1BQU0sTUFBTSxHQUFXLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBWSxJQUFJLEVBQUUsQ0FBQTtJQUNuRCxNQUFNLEdBQUcsR0FBVyxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQTtJQUN0QyxNQUFNLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFBO0lBQ25ELE1BQU0sSUFBSSxFQUFFLENBQUE7QUFDaEIsQ0FBQyxDQUFDLENBQUE7QUFLRixNQUFNLENBQUMsTUFBTSxXQUFX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